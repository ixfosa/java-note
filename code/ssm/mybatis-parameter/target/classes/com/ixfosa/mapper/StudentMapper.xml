<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
 namespace：必须有值，自定义的唯一字符串
 推荐使用：dao 接口的全限定名称
-->
<mapper namespace="com.ixfosa.dao.StudentDao">

    <!--parameterType ： dao接口中方法参数的数据类型。
        parameterType它的值是java的数据类型全限定名称或者是mybatis定义的别名
        例如：parameterType="java.lang.Integer"
        parameterType="int"

        注意：parameterType不是强制的，mybatis通过反射机制能够发现接口参数的数类型。
        所以可以没有。 一般我们也不写。

        使用 #{} 之后， mybatis执行sql是使用的jdbc中的 PreparedStatement 对象

        Dao 接口中方法的参数只有一个简单类型（java 基本类型和 String），
        占位符 #{ 任意字符 }，和方法的参数名无关。
    -->
    <select id="selectStudentById" parameterType="int" resultType="com.ixfosa.pojo.Student">
        select id, name, email, age from student where id = #{studentId}
    </select>


    <!--多个参数，使用@Param命名-->
    <select id="selectMultiParam" resultType="com.ixfosa.pojo.Student">
        select id, name, email, age from student where name = #{mymame} or age = #{myage}
    </select>


    <!--多个参数， 使用java对象的属性值，作为参数实际值
        使用对象语法： #{属性名,javaType=类型名称,jdbcType=数据类型} 很少用。
                    javaType:指java中的属性数据类型。
                    jdbcType:在数据库中的数据类型。
                    例如： #{paramName,javaType=java.lang.String,jdbcType=VARCHAR}
        我们使用的简化方式： #{属性名}  ，javaType, jdbcType的值mybatis反射能获取。不用提供
    -->
     <select id="selectMultiObject" resultType="com.ixfosa.pojo.Student">
           select id,name, email,age from student where
            name=#{paramName,javaType=java.lang.String,jdbcType=VARCHAR}
            or age=#{paramAge,javaType=java.lang.Integer,jdbcType=INTEGER}
     </select>
    
    <select id="selectMultiStudent" resultType="com.ixfosa.pojo.Student">
        select id, name, email, age from student where name = #{name} or age = #{age}
    </select>

    <!--多个参数使用位置-->
    <select id="selectMultiPosition" resultType="com.ixfosa.pojo.Student">
        select id,name, email,age from student where
          name = #{arg0} or age=#{arg1}
    </select>

    <!--多个参数，使用Map , 使用语法 #{map的key}-->
    <select id="selectMultiByMap" resultType="com.ixfosa.pojo.Student">
        select id,name, email,age from student where
          name = #{myname} or age=#{myage}
    </select>


    <!--
        #：占位符，告诉 mybatis 使用实际的参数值代替。
        并使用 PrepareStatement 对象执行 sql 语句, #{…}代替sql 语句的“?”。
        这样做更安全，更迅速

        $ 字符串替换，告诉 mybatis 使用$包含的“字符串”替换所在位置。
        使用 Statement 把 sql 语句和${}的内容连接起来。
        主要用在替换表名，列名，不同列排序等操作。
    -->
    <!--使用 ${} -->
    <select id="selectUse$" resultType="com.ixfosa.pojo.Student">
         select * from student where name = ${sname}
    </select>

    <!-- $替换列名 -->
    <select id="selectUse$Order" resultType="com.ixfosa.pojo.Student">
         select * from student order by ${colName}
    </select>

    
    
    
</mapper>